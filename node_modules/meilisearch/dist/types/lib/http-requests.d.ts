import 'cross-fetch/polyfill';
import { Config, IndexRequest, EnqueuedUpdate, IndexResponse, IndexOptions } from '../types';
declare class HttpRequests {
    headers: {};
    url: URL;
    constructor(config: Config);
    static addTrailingSlash(url: string): string;
    request({ method, url, params, body, config, }: {
        method: string;
        url: string;
        params?: {
            [key: string]: any;
        };
        body?: any;
        config?: Partial<Request>;
    }): Promise<any>;
    get(url: string, params?: {
        [key: string]: any;
    }, config?: Partial<Request>): Promise<void>;
    get<T = any>(url: string, params?: {
        [key: string]: any;
    }, config?: Partial<Request>): Promise<T>;
    post(url: string, data: IndexRequest, params?: {
        [key: string]: any;
    }, config?: Partial<Request>): Promise<IndexResponse>;
    post<T = any, R = EnqueuedUpdate>(url: string, data?: T, params?: {
        [key: string]: any;
    }, config?: Partial<Request>): Promise<R>;
    put(url: string, data: IndexOptions | IndexRequest, params?: {
        [key: string]: any;
    }, config?: Partial<Request>): Promise<IndexResponse>;
    put<T = any, R = EnqueuedUpdate>(url: string, data?: T, params?: {
        [key: string]: any;
    }, config?: Partial<Request>): Promise<R>;
    delete(url: string, data?: any, params?: {
        [key: string]: any;
    }, config?: Partial<Request>): Promise<void>;
    delete<T>(url: string, data?: any, params?: {
        [key: string]: any;
    }, config?: Partial<Request>): Promise<T>;
}
export { HttpRequests };
//# sourceMappingURL=http-requests.d.ts.map