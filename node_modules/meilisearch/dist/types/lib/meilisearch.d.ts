import { Index } from './indexes';
import { Config, IndexOptions, IndexResponse, Keys, Health, Stats, Version, EnqueuedDump } from '../types';
import { HttpRequests } from './http-requests';
declare class MeiliSearch {
    config: Config;
    httpRequest: HttpRequests;
    /**
     * Creates new MeiliSearch instance
     * @param {Config} config Configuration object
     */
    constructor(config: Config);
    /**
     * Return an Index instance
     * @memberof MeiliSearch
     * @method index
     * @template T
     * @param {string} indexUid The index UID
     * @returns {Index<T>} Instance of Index
     */
    index<T = any>(indexUid: string): Index<T>;
    /**
     * Gather information about an index by calling MeiliSearch and
     * return an Index instance with the gathered information
     * @memberof MeiliSearch
     * @method getIndex
     * @template T
     * @param {string} indexUid The index UID
     * @returns {Promise<Index<T>>} Promise containing Index instance
     */
    getIndex<T = any>(indexUid: string): Promise<Index<T>>;
    /**
     * Gather information about an index by calling MeiliSearch and
     * return the raw JSON response
     * @memberof MeiliSearch
     * @method getRawIndex
     * @param {string} indexUid The index UID
     * @returns {Promise<IndexResponse>} Promise containing index information
     */
    getRawIndex(indexUid: string): Promise<IndexResponse>;
    /**
     * Get an index or create it if it does not exist
     * @memberof MeiliSearch
     * @method getOrCreateIndex
     * @template T
     * @param {string} uid The index UID
     * @param {IndexOptions} options Index options
     * @returns {Promise<Index<T>>} Promise containing Index instance
     */
    getOrCreateIndex<T = any>(uid: string, options?: IndexOptions): Promise<Index<T>>;
    /**
     * Get all indexes in the database
     * @memberof MeiliSearch
     * @method getIndexes
     * @returns {Promise<IndexResponse[]>} Promise containing array of raw index information
     */
    getIndexes(): Promise<IndexResponse[]>;
    /**
     * Create a new index
     * @memberof MeiliSearch
     * @method createIndex
     * @template T
     * @param {string} uid The index UID
     * @param {IndexOptions} options Index options
     * @returns {Promise<Index<T>>} Promise containing Index instance
     */
    createIndex<T = any>(uid: string, options?: IndexOptions): Promise<Index<T>>;
    /**
     * Update an index
     * @memberof MeiliSearch
     * @method updateIndex
     * @template T
     * @param {string} uid The index UID
     * @param {IndexOptions} options Index options to update
     * @returns {Promise<Index<T>>} Promise containing Index instance after updating
     */
    updateIndex<T = any>(uid: string, options?: IndexOptions): Promise<Index<T>>;
    /**
     * Delete an index
     * @memberof MeiliSearch
     * @method deleteIndex
     * @param {string} uid The index UID
     * @returns {Promise<void>} Promise which resolves when index is deleted successfully
     */
    deleteIndex(uid: string): Promise<void>;
    /**
     * Deletes an index if it already exists.
     * @memberof MeiliSearch
     * @method deleteIndexIfExists
     * @param {string} uid The index UID
     * @returns {Promise<boolean>} Promise which resolves to true when index exists and is deleted successfully, otherwise false if it does not exist
     */
    deleteIndexIfExists(uid: string): Promise<boolean>;
    /**
     * Get private and public key
     * @memberof MeiliSearch
     * @method getKey
     * @returns {Promise<Keys>} Promise containing an object with keys
     */
    getKeys(): Promise<Keys>;
    /**
     * Checks if the server is healthy, otherwise an error will be thrown.
     * @memberof MeiliSearch
     * @method health
     * @returns {Promise<Health>} Promise containing an object with health details
     */
    health(): Promise<Health>;
    /**
     * Checks if the server is healthy, return true or false.
     * @memberof MeiliSearch
     * @method isHealthy
     * @returns {Promise<boolean>} Promise containing a boolean
     */
    isHealthy(): Promise<boolean>;
    /**
     * Get the stats of all the database
     * @memberof MeiliSearch
     * @method getStats
     * @returns {Promise<Stats>} Promise containing object of all the stats
     */
    getStats(): Promise<Stats>;
    /**
     * Get the version of MeiliSearch
     * @memberof MeiliSearch
     * @method getVersion
     * @returns {Promise<Version>} Promise containing object with version details
     */
    getVersion(): Promise<Version>;
    /**
     * Triggers a dump creation process
     * @memberof MeiliSearch
     * @method createDump
     * @returns {Promise<EnqueuedDump>} Promise containing object of the enqueued update
     */
    createDump(): Promise<EnqueuedDump>;
    /**
     * Get the status of a dump creation process
     * @memberof MeiliSearch
     * @method getDumpStatus
     * @param {string} dumpUid Dump UID
     * @returns {Promise<EnqueuedDump>} Promise containing object of the enqueued update
     */
    getDumpStatus(dumpUid: string): Promise<EnqueuedDump>;
}
export { MeiliSearch };
//# sourceMappingURL=meilisearch.d.ts.map